namespace AB

types
    ABProgram;
    Integer, String     <: Type;
    Decl;
    IfStmt, MapStmt     <: Stmt;
    Var, Num            <: Expr;

tokens
	' ', '\r', '\n' :: skip
	'dcl', 'enddcl', 'integer', 'char', 'if', 'endif', 'map', 'to', ';', '(', ')' :: reserved
	number :: Num
	string :: Var

handlers
    EOF                 -> push ABProgram(data,code)
                           where code := pop* Stmt,
                                 data := pop* Decl
    'dcl'               -> lift DCL
    'enddcl'            -> drop DCL
    ';' given DCL       -> push Decl(v,t)
                           where t := pop Type,
                                 v := pop Var
    'integer' given DCL -> push Integer
    'char'    given DCL -> push String(n)
                           where n := await (Num given BRACKET) with CHAR
    '(' given CHAR      -> lift BRACKET
    ')' given CHAR      -> drop BRACKET
    'if'                -> push IfStmt(cond,code)
                           where cond := await Expr with IF#,
                                 code := await* Stmt with IF#
    'endif'             -> drop IF#
    'map'               -> push MapStmt(source,target)
                           where source := await Expr with MAP,
                                 target := await Var with MAP

%    V given MAP         -> assert exists Decl(v,t) such that v == this
