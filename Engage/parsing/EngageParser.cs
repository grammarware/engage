//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/grammarware/projects/engage/Engage/parsing/Engage.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Engage.parsing {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class EngageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, ID=34, QUOTED=35, WHITESPACE=36, NEWLINE=37, COMMENT=38;
	public const int
		RULE_engSpec = 0, RULE_typeDecl = 1, RULE_superType = 2, RULE_tokenDecl = 3, 
		RULE_lexeme = 4, RULE_handlerDecl = 5, RULE_trigger = 6, RULE_reaction = 7, 
		RULE_name = 8, RULE_flag = 9, RULE_assignment = 10, RULE_operation = 11;
	public static readonly string[] ruleNames = {
		"engSpec", "typeDecl", "superType", "tokenDecl", "lexeme", "handlerDecl", 
		"trigger", "reaction", "name", "flag", "assignment", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'types'", "'tokens'", "'handlers'", "','", "'<:'", 
		"';'", "'::'", "'number'", "'string'", "'->'", "'where'", "'while'", "'BOF'", 
		"'EOF'", "'upon'", "'push'", "'('", "')'", "'wrap'", "'lift'", "'drop'", 
		"'trim'", "'*'", "'pass'", "'dump'", "':='", "'pop'", "'pop*'", "'await'", 
		"'with'", "'await*'", "'tear'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ID", "QUOTED", 
		"WHITESPACE", "NEWLINE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Engage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EngageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EngageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EngageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EngSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenDeclContext[] tokenDecl() {
			return GetRuleContexts<TokenDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenDeclContext tokenDecl(int i) {
			return GetRuleContext<TokenDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerDeclContext[] handlerDecl() {
			return GetRuleContexts<HandlerDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerDeclContext handlerDecl(int i) {
			return GetRuleContext<HandlerDeclContext>(i);
		}
		public EngSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterEngSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitEngSpec(this);
		}
	}

	[RuleVersion(0)]
	public EngSpecContext engSpec() {
		EngSpecContext _localctx = new EngSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_engSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(T__0);
			State = 25; Match(ID);
			State = 26; Match(T__1);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 27; typeDecl();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33; Match(T__2);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << QUOTED))) != 0)) {
				{
				{
				State = 34; tokenDecl();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40; Match(T__3);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << ID) | (1L << QUOTED))) != 0)) {
				{
				{
				State = 41; handlerDecl();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(EngageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(EngageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperTypeContext superType() {
			return GetRuleContext<SuperTypeContext>(0);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(ID);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 48; Match(T__4);
				State = 49; Match(ID);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 55; Match(T__5);
				State = 56; superType();
				}
			}

			State = 59; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		public SuperTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterSuperType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitSuperType(this);
		}
	}

	[RuleVersion(0)]
	public SuperTypeContext superType() {
		SuperTypeContext _localctx = new SuperTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_superType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexemeContext[] lexeme() {
			return GetRuleContexts<LexemeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexemeContext lexeme(int i) {
			return GetRuleContext<LexemeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		public TokenDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterTokenDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitTokenDecl(this);
		}
	}

	[RuleVersion(0)]
	public TokenDeclContext tokenDecl() {
		TokenDeclContext _localctx = new TokenDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_tokenDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; lexeme();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 64; Match(T__4);
				State = 65; lexeme();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71; Match(T__7);
			State = 72; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexemeContext : ParserRuleContext {
		public IToken Q;
		public IToken N;
		public IToken S;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED() { return GetToken(EngageParser.QUOTED, 0); }
		public LexemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexeme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterLexeme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitLexeme(this);
		}
	}

	[RuleVersion(0)]
	public LexemeContext lexeme() {
		LexemeContext _localctx = new LexemeContext(Context, State);
		EnterRule(_localctx, 8, RULE_lexeme);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; _localctx.Q = Match(QUOTED);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; _localctx.N = Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; _localctx.S = Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclContext : ParserRuleContext {
		public IToken Adv;
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReactionContext reaction() {
			return GetRuleContext<ReactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public HandlerDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterHandlerDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitHandlerDecl(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclContext handlerDecl() {
		HandlerDeclContext _localctx = new HandlerDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_handlerDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; trigger();
			State = 80; Match(T__10);
			State = 81; reaction();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11 || _la==T__12) {
				{
				State = 82;
				_localctx.Adv = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__12) ) {
					_localctx.Adv = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 83; assignment();
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 84; Match(T__4);
					State = 85; assignment();
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		public IToken T;
		public IToken Bof;
		public IToken Eof;
		public IToken NT;
		public IToken Flag;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED() { return GetToken(EngageParser.QUOTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(EngageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(EngageParser.ID, i);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 12, RULE_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTED:
				{
				State = 93; _localctx.T = Match(QUOTED);
				}
				break;
			case T__13:
				{
				State = 94; _localctx.Bof = Match(T__13);
				}
				break;
			case T__14:
				{
				State = 95; _localctx.Eof = Match(T__14);
				}
				break;
			case ID:
				{
				State = 96; _localctx.NT = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 99; Match(T__15);
				State = 100; _localctx.Flag = Match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReactionContext : ParserRuleContext {
		public IToken Command;
		public IToken Star;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(EngageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(EngageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlagContext flag() {
			return GetRuleContext<FlagContext>(0);
		}
		public ReactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterReaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitReaction(this);
		}
	}

	[RuleVersion(0)]
	public ReactionContext reaction() {
		ReactionContext _localctx = new ReactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_reaction);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; _localctx.Command = Match(T__16);
				State = 104; name();
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 105; Match(T__17);
					State = 106; Match(ID);
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 107; Match(T__4);
						State = 108; Match(ID);
						}
						}
						State = 113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 114; Match(T__18);
					}
				}

				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; _localctx.Command = Match(T__19);
				State = 118; name();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 119; Match(T__17);
					State = 120; Match(ID);
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 121; Match(T__4);
						State = 122; Match(ID);
						}
						}
						State = 127;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 128; Match(T__18);
					}
				}

				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131; _localctx.Command = Match(T__20);
				State = 132; flag();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133; _localctx.Command = Match(T__21);
				State = 134; flag();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; _localctx.Command = Match(T__22);
				State = 136; name();
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23) {
					{
					State = 137; _localctx.Star = Match(T__23);
					}
				}

				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 6);
				{
				State = 140; _localctx.Command = Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 7);
				{
				State = 141; _localctx.Command = Match(T__25);
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 142; name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 16, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		public FlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterFlag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitFlag(this);
		}
	}

	[RuleVersion(0)]
	public FlagContext flag() {
		FlagContext _localctx = new FlagContext(Context, State);
		EnterRule(_localctx, 18, RULE_flag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(EngageParser.ID, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 151; Match(ID);
				State = 152; Match(T__26);
				}
			}

			State = 155; operation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public IToken Command;
		public IToken ExtraContext;
		public IToken LocalContext;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(EngageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(EngageParser.ID, i);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEngageListener typedListener = listener as IEngageListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 22, RULE_operation);
		int _la;
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; _localctx.Command = Match(T__27);
				State = 158; name();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; _localctx.Command = Match(T__28);
				State = 160; name();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; _localctx.Command = Match(T__29);
				State = 169;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 162; name();
					}
					break;
				case T__17:
					{
					{
					State = 163; Match(T__17);
					State = 164; name();
					State = 165; Match(T__15);
					State = 166; _localctx.ExtraContext = Match(ID);
					State = 167; Match(T__18);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 171; Match(T__30);
					State = 172; _localctx.LocalContext = Match(ID);
					}
				}

				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; _localctx.Command = Match(T__31);
				State = 176; name();
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 177; Match(T__30);
					State = 178; _localctx.LocalContext = Match(ID);
					}
				}

				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 5);
				{
				State = 181; _localctx.Command = Match(T__32);
				State = 182; name();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 6);
				{
				State = 183; _localctx.Command = Match(T__25);
				State = 185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 184; name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\xC0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1F', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\"', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '-', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x30', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x35', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x38', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '<', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x45', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'H', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'P', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'Y', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\\', '\v', '\a', '\x5', '\a', '^', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x64', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'p', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 's', '\v', '\t', '\x3', '\t', '\x5', '\t', 'v', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '~', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\x81', '\v', '\t', '\x3', '\t', '\x5', '\t', '\x84', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x8D', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x92', '\n', '\t', '\x5', '\t', '\x94', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x9C', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xAC', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xB0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xB6', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xBC', '\n', '\r', '\x5', '\r', 
		'\xBE', '\n', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', 
		'\x3', '\x3', '\x2', '\xE', '\xF', '\x2', '\xD7', '\x2', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x31', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'?', '\x3', '\x2', '\x2', '\x2', '\b', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'O', '\x3', '\x2', '\x2', '\x2', '\f', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x63', '\x3', '\x2', '\x2', '\x2', '\x10', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x95', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', 
		'\x3', '\x2', '\x2', '\x1B', '\x1C', '\a', '$', '\x2', '\x2', '\x1C', 
		' ', '\a', '\x4', '\x2', '\x2', '\x1D', '\x1F', '\x5', '\x4', '\x3', '\x2', 
		'\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', 
		'\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '#', '\'', '\a', '\x5', '\x2', '\x2', '$', 
		'&', '\x5', '\b', '\x5', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '.', '\a', '\x6', 
		'\x2', '\x2', '+', '-', '\x5', '\f', '\a', '\x2', ',', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x36', '\a', '$', '\x2', '\x2', '\x32', '\x33', '\a', '\a', '\x2', '\x2', 
		'\x33', '\x35', '\a', '$', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x37', ';', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\a', '\b', '\x2', '\x2', ':', '<', '\x5', 
		'\x6', '\x4', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', 
		'>', '\a', '\t', '\x2', '\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', '$', '\x2', '\x2', '@', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x46', '\x5', '\n', '\x6', '\x2', '\x42', '\x43', '\a', '\a', 
		'\x2', '\x2', '\x43', '\x45', '\x5', '\n', '\x6', '\x2', '\x44', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'K', '\a', '$', 
		'\x2', '\x2', 'K', '\t', '\x3', '\x2', '\x2', '\x2', 'L', 'P', '\a', '%', 
		'\x2', '\x2', 'M', 'P', '\a', '\v', '\x2', '\x2', 'N', 'P', '\a', '\f', 
		'\x2', '\x2', 'O', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x5', '\xE', '\b', '\x2', 'R', 'S', '\a', 
		'\r', '\x2', '\x2', 'S', ']', '\x5', '\x10', '\t', '\x2', 'T', 'U', '\t', 
		'\x2', '\x2', '\x2', 'U', 'Z', '\x5', '\x16', '\f', '\x2', 'V', 'W', '\a', 
		'\a', '\x2', '\x2', 'W', 'Y', '\x5', '\x16', '\f', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 
		'^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		']', 'T', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', 
		'^', '\r', '\x3', '\x2', '\x2', '\x2', '_', '\x64', '\a', '%', '\x2', 
		'\x2', '`', '\x64', '\a', '\x10', '\x2', '\x2', '\x61', '\x64', '\a', 
		'\x11', '\x2', '\x2', '\x62', '\x64', '\a', '$', '\x2', '\x2', '\x63', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x63', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x12', '\x2', '\x2', '\x66', 'h', '\a', '$', '\x2', '\x2', 'g', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', '\xF', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x13', '\x2', 
		'\x2', 'j', 'u', '\x5', '\x12', '\n', '\x2', 'k', 'l', '\a', '\x14', '\x2', 
		'\x2', 'l', 'q', '\a', '$', '\x2', '\x2', 'm', 'n', '\a', '\a', '\x2', 
		'\x2', 'n', 'p', '\a', '$', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', 
		'\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\a', '\x15', '\x2', 
		'\x2', 'u', 'k', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\x94', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x16', 
		'\x2', '\x2', 'x', '\x83', '\x5', '\x12', '\n', '\x2', 'y', 'z', '\a', 
		'\x14', '\x2', '\x2', 'z', '\x7F', '\a', '$', '\x2', '\x2', '{', '|', 
		'\a', '\a', '\x2', '\x2', '|', '~', '\a', '$', '\x2', '\x2', '}', '{', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x84', '\a', '\x15', '\x2', '\x2', '\x83', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x94', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', 
		'\x17', '\x2', '\x2', '\x86', '\x94', '\x5', '\x14', '\v', '\x2', '\x87', 
		'\x88', '\a', '\x18', '\x2', '\x2', '\x88', '\x94', '\x5', '\x14', '\v', 
		'\x2', '\x89', '\x8A', '\a', '\x19', '\x2', '\x2', '\x8A', '\x8C', '\x5', 
		'\x12', '\n', '\x2', '\x8B', '\x8D', '\a', '\x1A', '\x2', '\x2', '\x8C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x94', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x94', '\a', 
		'\x1B', '\x2', '\x2', '\x8F', '\x91', '\a', '\x1C', '\x2', '\x2', '\x90', 
		'\x92', '\x5', '\x12', '\n', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x93', 'i', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x93', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x87', '\x3', '\x2', '\x2', '\x2', '\x93', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x94', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\a', '$', '\x2', '\x2', '\x96', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\a', '$', '\x2', '\x2', '\x98', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '$', '\x2', 
		'\x2', '\x9A', '\x9C', '\a', '\x1D', '\x2', '\x2', '\x9B', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x18', '\r', 
		'\x2', '\x9E', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\x1E', '\x2', '\x2', '\xA0', '\xBE', '\x5', '\x12', '\n', '\x2', '\xA1', 
		'\xA2', '\a', '\x1F', '\x2', '\x2', '\xA2', '\xBE', '\x5', '\x12', '\n', 
		'\x2', '\xA3', '\xAB', '\a', ' ', '\x2', '\x2', '\xA4', '\xAC', '\x5', 
		'\x12', '\n', '\x2', '\xA5', '\xA6', '\a', '\x14', '\x2', '\x2', '\xA6', 
		'\xA7', '\x5', '\x12', '\n', '\x2', '\xA7', '\xA8', '\a', '\x12', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '$', '\x2', '\x2', '\xA9', '\xAA', '\a', 
		'\x15', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'!', '\x2', '\x2', '\xAE', '\xB0', '\a', '$', '\x2', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\"', 
		'\x2', '\x2', '\xB2', '\xB5', '\x5', '\x12', '\n', '\x2', '\xB3', '\xB4', 
		'\a', '!', '\x2', '\x2', '\xB4', '\xB6', '\a', '$', '\x2', '\x2', '\xB5', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'#', '\x2', '\x2', '\xB8', '\xBE', '\x5', '\x12', '\n', '\x2', '\xB9', 
		'\xBB', '\a', '\x1C', '\x2', '\x2', '\xBA', '\xBC', '\x5', '\x12', '\n', 
		'\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', ' ', '\'', '.', '\x36', ';', '\x46', 'O', 'Z', ']', '\x63', 
		'g', 'q', 'u', '\x7F', '\x83', '\x8C', '\x91', '\x93', '\x9B', '\xAB', 
		'\xAF', '\xB5', '\xBB', '\xBD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Engage.parsing
